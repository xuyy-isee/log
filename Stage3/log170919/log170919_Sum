2017.09.04(一)
从今天开始，修改网络拓扑结构，重新测试在不同的网络拓扑结构下，之前对OLSR路由协议的优化是否还能奏效。

log170904_1中存放的是网络中节点全连通的状态，即任何一个节点都是本节点的一跳邻居节点；
log170904_2里面是平时仿真时候所使用的拓扑结构；
log170904_3中存放的是netform.h文档中原先注释掉的拓扑结构；
log170904_4_1中存放的是UCDS所在文献中实验部分的第一个例子所用的拓扑结构图(错误)；
log170904_4_2中存放的是UCDS所在文献中实验部分的第一个例子所用的拓扑结构图(正确)；




2017.09.05(二)
log170904_4_1中的仿真是存在问题的，如下所示。
节点13和节点12根本就不相连的，但是节点13和节点6是相连的，因为这样的错误使得节点13没有成为骨干节点。
  cdset_node_id = [6] .
  cdset_node_id = [11] .
  cdset_node_id = [12] .
  
  main_node_id = [13], main_node_nbnum = 2 

  main_node_id = [13], nb_node_id = [11], nb_status = 1 .  
  main_node_id = [13], nb_node_id = [14], nb_status = 1 .  
  main_node_id = [13], nb_node_id = [6], nb_status = 0 .  
  main_node_id = [13], nb_node_id = [12], nb_status = 0 .  

后来重新运行之后即为正确，正确的运行结果存放在log170904_4_2。
  cdset_node_id = [6] .
  cdset_node_id = [11] .
  cdset_node_id = [13] .
  
  main_node_id = [13], main_node_nbnum = 3 

  main_node_id = [13], nb_node_id = [11], nb_status = 1 .  
  main_node_id = [13], nb_node_id = [6], nb_status = 1 .  
  main_node_id = [13], nb_node_id = [14], nb_status = 1 .  
 
通过查看9.4文件中的4个拓扑结构仿真下得到的结果，可以知道这种从骨干节点中选择MPR节点的方法是没有问题的，但是当使用UCDS所在文献中实验部分的第二个例子所用的拓扑结构图经过简化的拓扑结构的时候，发现了该方案不能找到MPR节点的重大问题！！！
继续细读《基于WNW战术波形网络的拓扑控制及路由优化研究》！！！！


虚拟骨干节点是由DS节点和CS节点共同组成的，再选虚拟骨干网络的时候要把整个流程都走一
遍。
Stage1: 每个节点执行DS规则，即指定自身或邻居节点为DS成员，得到DS集和非DS集；
Stage2: 非DS成员节点执行非CS规则，从非DS集中除去非CS节点；
Stage3: 对非DS集合中节点i执行简单CS例外及CS规则，得到必须为CS成员的节点，并将其从非DS集合中去除，加入CS集合，即：
	step1: 对节点i遍历其邻居j、k，若只有一个为DS成员，执行step2；否则，执行step3；
	step2: 执行CS例外规则第二条，若CS例外规则成立，跳转step1；否则，跳转step3；
	step3: 若j、k不直连且不存在公共邻居(非i)，此时i必须为CS成员，将其从非DS集中去除，加入到CS集合，遍历结束；
Stage4: 对非DS集合节点i执行CS例外及CS规则，可得CS集合，即：
	step1: 对节点i遍历其邻居j、k，若j、k中至少一个为DS节点，跳转step2；否则继续遍历；
	step2: 执行CS规则，成立则跳转step1，失败则跳转step3；
	step3: 执行CS规则，若i为CS节点，加入CS集，结束遍历；否则跳转step1。

对于标记二跳节点是否为DS节点可以使用nbset，这个在CS例外规则里面要用到；
--------------------好像也不用，因为这个两条节点就是本节点的一跳邻居节点
对于标记CS节点，可以将信息存放在本节点的link code的4bit中的1bit，因为每个节点只要判断自己是不是CS节点；
对于标记CS'节点，也可以只用4bit中的1bit；

估计这一块的代码要写一段时间的，争取两天之内调出来。







2017.09.06(三)
unifying connected domainting set with low message complexity, fault tolerance, and flexible dominating factor.

unifying connected domainting set using localized two hop informating with a flexible dominating factor.

simple and efficient backbone algorithm for calculating connected dominating set in wireless Ad-hoc network.

今天只写了step2、step3，明天可以开始写step4。






2017.09.07(四)
今天开例会的时候，雷老师提醒了我一个很重要的问题，这个问题也是我之前一直忽略没有考虑的——————比特数是否够用？

因为既然文献中已经写出来了，那么就肯定是能够实现的，所以我就一直在写代码。然而我忽略了一个很重要的区别，就是HELLO消息的比特数是否够用。因为我们工程中使用的HELLO消息是128bit的，而目前仅剩的空闲比特数也很少了，所以这是一个基于所有问题之前的重大考虑！
在UCDS-MPR算法中，由于在选择CS节点的中间有中间过度节点的出现，即CS'的存在，在CS规则中，它表示“若节点j和k的共同邻居节点中存在多个CS'，则具有最高支配因子的CS'成员将被选为CS成员”。这里面选择自己是否为CS不是自己能够决定的，需要查看二跳节点的支配因子，而这点我们是不知道的。
在CS例外规则中，它表示“对于非DS成员节点i，当邻居节点j和k的共同邻居中有一个CS成员，此时CS规则不用执行”。由于于本节点都接收不到二跳节点的HELLO消息，根本就不能知道二跳节点是否为CS节点，因此该条规则是无法执行的。

以上所说的无法执行，是在执行DS规则时候确定的方案下没有足够的HELLO消息比特数来支持上面的节点信息进行交互。


【ATTENTION】
每次都有这个问题！！！
方案没有确定就开始写代码，写出来的代码大部分易做无效处理！！那么这就是浪费时间做无用功！！






2017.09.08(五)

---------------------------------【大问题】----------------------------------------
昨天对UCDS-MPR选择算法的流程初步估计HELLO消息比特数是不够用的，下面就来具体的分析一下。
导致比特数不够用最主要的部分就是CS规则。
CS规则：对于非DS成员节点i，存在邻居节点j和k，其中两者至少有一个为DS成员，且两者DS邻居节点集不相交，则节点i为CS的候选成员CS'；若节点j和k的共同邻居节点中存在多个CS'，则具有最高支配因子的CS'成员将被选为CS成员。
按照原先的想法，如果本节点通过CS规则评估自己为CS'，那么本节点在HELLO消息自己节点号所对应的Link Code的那4bit中的1bit进行标记，说明自己是CS'；
当邻居节点接收到本节点的HELLO消息，并知道本节点为CS'，他们将该信息记录下来，并存放在每个节点自己维护的CS'表中；
在邻居节点中选择一个节点作为本节点，它查看自己和某一个邻居节点的共同邻居中是否存在多个CS'，如果存在，那么就选择其中支配因子最大的一个节点作为CS节点；
本节点要将自己选择了哪个节点为CS节点的信息通过HELLO消息告诉该邻居节点，那怎么告诉呢？
1) 专门用5bit来表示节点号？---那么比特数肯定是不够用的！
2) 借用Link Code中2bit的第四种表达方式？---这种方法在选用DS节点的时候就已经被否定了！
---------------------------------【大转折】----------------------------------------
这个方法好像还可以再考虑一下！！因为现在的情况和DS节点当时的情况有所不同，现在我们可以借用DS的消息来进行区分。
在Link Code中，我们无非就是要区分两种情况，一种是没有被选为MPR节点的CS节点，另一种是被选为MPR节点的CS节点；
我们可以用MPR_NEIGH表示被选为MPR的CS节点，用CS_NEIGH表示没有被选为MPR的Cs节点；
虽然HELLO消息中可能有很多节点都会被标记成MPR_NEIGH，但是当接收到的节点排除自己是DS节点之后就可以知道自己是作为CS节点被选为MPR节点的；
排除的方法有多种：
1) 如果该节点之前没有任何DS节点的标志，本节点选择该节点为DS节点，那么在choose_ds_node_id()这个标志位上会标识出来。当该节点对应节点号的Link Code是MPR_NEIGH，且choose_ds_node_id()为该节点节点号，那么该节点是先被本节点选为DS节点，然后再被选为MPR节点了；
2) 如果该节点之前就有DS节点的标志，那么即使本节点发送的HELLO消息对应节点号的Link Code是MPR_NEIGH，而choose_ds_node_id()不是该节点节点号，也不会说明该节点是CS节点的，因为CS节点是在非DS节点中选取的，那么该节点是作为DS节点的身份被选为MPR节点的；
3) 如果该节点之前没有任何DS节点的标志，本节点发送的HELLO消息对应节点号的Link Code是MPR_NEIGH，而choose_ds_node_id()不是该节点节点号，那说明该节点是CS节点的，因为本节点只会在DS、CS节点中选取MPR节点，既然本节点没有选择该节点作为DS节点，且该节点也没有其他的DS节点标志，但本节点选择该节点作为MPR节点，那么就可以说明该节点是先被本节点选为CS节点，然后以CS节点的身份被选为MPR节点的；
4) 如果该节点之前没有任何DS节点的标志，本节点发送的HELLO消息对应节点号的Link Code是CS_NEIGH，而choose_ds_node_id()不是该节点节点号，那也会说明该节点是CS节点的，该节点被本节点选为CS节点，但没有被选为MPR节点。


所爱隔山海，山海皆可平。


在写代码的过程中，其中Stage4的step2是执行CS例外规则，就CS例外规则的第一条，其实在实施上是有问题的。
CS例外规则-第1条：对于非DS成员节点i，当邻居节点j与k的共同邻居中有一个CS成员，此时CS规则不用执行；
j与k的共同邻居一般都是本节点的二条邻居节点，那么本节点是无法收到它的HELLO消息的，因此不能在本节点这里将他们排除；
可以跳过这里的例外规则，及时最后本节点通过的CS规则，那也不过是成为了CS'，之后是否成为CS是要在j与k的时候才能判断的，那么可以当他们在判断之前，先看看j与k的共同邻居节点中是否有一个CS成员节点，如果有，那么就不用再从CS'选取CS节点了；如果没有，再从CS'里面选取CS节点。






2017.09.09(六)

---------------------------------【大问题】----------------------------------------
【这个问题很急】
又碰到可能是影响该方案是否可行的瓶颈了。
本来打算在正式选择CS节点的时候不是在本节点进行选择，而是在j节点/k节点的时候再进行选择的，但是现在有个问题，节点j和节点k是同一个节点i的邻居，那么它们两者之间应该是二跳邻居的关系，而在本方案的设定中，是不能知道二跳节点是否为DS节点的，那么就不能判定是否符合“j和k两者之中至少有一个为DS成员这个条件了！！！






2017.09.10(日)





2017.09.11(一)
---------------------------------【大问题】----------------------------------------
UCDS-MPR这个想法整个的好像就是错误的！！！
就论文中实验一举的网络拓扑的例子，在进行骨干节点，即DS和CS节点的筛选之后，其实有的节点通过现有的骨干节点依旧不能选择出所有的MPR节点。
eg.节点14，与之相连的骨干节点只有节点13，N={12,13}，N2={12-15,12-6,13-6,13-11}；由于本节点的MPR集是可以覆盖所有的二跳节点的，但是在这种情况下，二跳节点中的13-12-15就不能覆盖了，这种情况就未被了这一原则。
这里之所以没有选择12作为DS节点或者CS节点的原因如下：
1) 没有被选为DS节点，这是因为节点14选择了节点号更大的13作为DS节点了，节点13只有被节点14选为DS节点，如果不选13，那也只选了12，是不行的；
2) 没有被选为CS节点，这是因为CS规则中提到“对于非DS成员节点i，存在邻居节点j和k，其中两者至少有一个为DS节点，且两者DS邻居节点集不相交”，然而节点12的邻居节点集为{12,6,15}，节点13的邻居节点集为{13,6,11}，其中节点6是共同节点，因此相交。
事实上我觉得CS规则中不应该是“两者DS邻居节点集不相交”，而是“不完全相等”；或者“两者DS邻居节点集不相交”这句话的理解是错误的，如果两个节点都是DS节点，那么它们都有“DS邻居节点集”，但是如果两个节点中只有一个为DS节点，那么应该只有一个“DS邻居节点集”，另一个就不存在。
在以上两种修改过程中就可以得到节点12为CS节点，从而节点14能够选择的MPR就足够了。


---------------------------------【猜测解释】----------------------------------------
在选择虚拟骨干节点网的时候，其实它已经考虑了整个网络的连通性，所以在选择MPR的时候，它就可以忽略“MPR需要覆盖所有二跳节点”这样的考虑了，即使没有覆盖，那么通过其他的节点、通过更多的跳数也能够让整个网络的其他节点都收到TC消息。



【问题】
考虑一个问题：
是不是在转发消息的时候只有MPR节点在工作，那么在路由选择的时候是否要考虑这个问题呢？
【解释】
可以通过在网络中让节点之间进行发包来验证，结果是：
并不是上面这样的理解！！！
MPR节点的存在只是为了减少控制消息的转发，也就是控制TC消息的泛洪；对于实际网络中进行的业务包发送是没有限制的，也就是说在转发业务的时候是不考虑MPR节点的，是所有的普通节点都可以转发的，因此在创建路由的时候是不会说只在MPR中选择的节点的；否则其他没有被选为MPR节点的普通节点它们的存在都是没有意义的了！







2017.09.12(二)
	昨天和雷老师在讨论的时候，最后我和他提了一个之前在论文上看到的优化MPR集合的方法，并且得到了他的认可，该方法即当某个节点在选择MPR的时候，优先选择已经被其他节点选为MPR节点的邻居节点作为MPR，从而减少MPR节点的数量。之后我们一致决定现将这个简单的想法进行实现，然后再去实现虚拟骨干节点的想法。
	但是后来我看了一下实验一中的拓扑结构图，我觉得可能还是骨干节点的那个方法能够更好的减少MPR的节点数量。因为就这个结构而言，“从已经被其他节点选择为MPR节点的邻居节点中选择MPR节点”的那个方法几乎不能起到减少MPR节点的数量，因为该方法归根到底使用的还是标准MPR选择算法的一套理论，即选择出来的MPR需要覆盖所有的二跳节点。而就骨干节点这个方法，则不然，它首先通过虚拟骨干节点集来将整个网络连通，之后再在虚拟骨干节点集中选择MPR，那么即使不满足MPR要覆盖左右的二跳节点这一条件，本节点所发送的TC通过一定的跳数也一定能够到达它所有的二跳节点。
	因此，我决定还是优先完成关于骨干节点方法的代码编写，下面要做的是对TC消息格式进行修改，使得其能够广播所有的DS节点。


	现在的问题主要是在CS规则中有写道：对于非Ds成员节点i，存在邻居节点j和k，其中二两至少有一个为DS成员，且两者DS邻居节点集不相交，则节点i为CS的候选成员节点CS'；若节点j和k的共同邻居节点中存在多个CS'，则具有最高支配因子的CS'成员将被选为CS成员。
	下面解释一下在编程中我是如何实现上述的规则的：
1、首先以节点i为本节点，判断本节点为非DS节点。
2、然后依次遍历所有的一跳邻居节点，从中找到两个节点j和k，判断两者中是否至少有一个为DS成员，如果没有，则继续遍历。
（以上两点都是很好判断的，因为本节点的本地DS集中包含着自己是否为DS成员节点以及自己的一跳邻居节点是否为DS成员节点）
3、再判断这j和k的DS邻居节点集是否相交，只要判断本节点通过一跳邻居节点j和k连接到二跳邻居节点中是否有相同的节点号，如果有，则跳转2，继续遍历；如果没有相等的节点，说明两者邻居节点集不相交，将本节点i标注为CS'。
4、本节点通过HELLO消息中的1bit标注自己是否为CS'节点，邻居节点接收到HELLO消息后记录在linkset下来。
5、以节点j为本节点，遍历所有的二跳节点，判断本节点和二跳节点k两者中至少有一个为DS节点。
当判断二跳节点是否为DS节点的时候就要用到在TC消息中广播的信息。
6、首先判断两者的共同节点-即本节点j的一跳节点中是否有CS节点，如果有，则跳转5，继续遍历；否则跳转7。
它可以通过接收的HELLO消息知道自己的一跳节点中是否有CS节点以及CS'节点。
7、若两者共同节点没有CS节点，则判断是否有CS'节点，如果没有，则跳转5；否则跳转8。
8、如果有多个CS'节点，则选择支配因子最高CS'节点作为CS节点，并通过HELLO消息中的OLSR_MPR_NEIGH或者OLSR_CS_NEIGH告诉该节点。
9、跳转4继续遍历，直至遍历结束。
10、当节点收到j的HELLO消息，并且在自己对应的节点号位置上发现自己为OLSR_MPR_NEIGH或者OLSR_CS_NEIGH，在查询本地DS节点集后知道自己不是DS节点，且节点j的HELLO消息中也没有选择自己为DS节点，则将自己标志为CS节点，并通过HELLO消息告诉自己的邻居节点。




---------------------------------【大问题】----------------------------------------

幸好没有马上就开始码代码，在此之前先写了流程图，又对其中最重要的部分进行的思索，现在感觉又出来了大问题！！！

---------------------------------【虚惊一场】----------------------------------------
不对不对，这个问题不是问题，我本来以为UCDS中的MPR和标准的MPR是有区别的，这就会导致TC最终不能传送到所有的节点那里，但是事实上并不会。因为这个网络还是通过虚拟骨干节点进行连接的，最终的消息都是会传送到每个节点的！！


得好好考虑一下TC消息中的DS节点消息怎么传播和更新。
有关DS节点的更新和拓扑结构的更新是不一样的，因为拓扑结构的更新中是有有效时长的，如果在一定的时长内没有接收到更新之后的消息，那么该项就会被去除；如果接收到该消息，那么有效时长就会更新变长，然后等待下一次的更新。




---------------------------------【大问题】----------------------------------------
TC消息不是每个节点都会发送的！！！只有MPR节点会发送！！！！所以并不是每个节点的DS消息都能够传送出去！！！

---------------------------------【解决方法】----------------------------------------
1、每个MPR节点在TC中存放它所知道的所有的DS节点，即它自己以及它的邻居节点是否为DS节点，需要20bit。
————可行但是在更新的时候比较麻烦，还没有想到用怎样的方式进行更新。
————可以使用类似于nb2hopset的方式来储存发送TC的节点号, 以及该节点的邻居节点中的DS节点号，假设为dsset。当节点0收到节点1的TC，其中节点12\13为DS，则可以更新dsset为1--12,1--13；如果节点2收到节点2的TC，其中的DS节点为12，则可以更新dsset为2--12；如果之后节点0收到节点1的TC，其中节点11\13为DS，则可以更新dsset为1--11,1--13，将1--12删除，并且添加一条1--11；当本节点0中所有的12都被删除的时候，就说明12已经不是DS节点了。

2、每个MPR节点只在TC中存放自己是否是DS节点，这样只需要1bit。
————不行，这个方法不可行，因为骨干节点集跟定比MPR节点集大。
————可能是可行的，因为每一个节点都要选择一个节点作为DS节点，而且每个节点都要从与自己相邻的DS节点中选择出MPR节点，所以照理来说应该所有的MPR节点的邻居DS节点会包含所有的DS节点，这样就所有的DS节点都得到了广播。

现在已经进行的编程有以下部分：
1、TC消息结构的编码和解码；
2、process_tc中已经对接收到的信息进行处理，或者添加表项，或者删除表项；


明天的工作有：
1、每个节点根据已经得到全网的DS节点信息表，进行CS节点的选择；
2、调试代码。







2017.09.13(三)

感觉前段时间写的代码好乱，需要好好整理一下。

【修改】
原先的打算是将DS节点的消息通过TC消息广播出去，这是基于原先将节点j作为本节点的时候进行的处理；
可是如果我们就直接按照原先的想法，就从本节点i的角度来思考问题的话，那么需要广播的就是CS节点了；
相比原先的DS节点，一般而言他们的数量会很多，在广播的过程中很容易出现更新的错误；
但是CS节点的数量肯定是很少的，至少相比于DS节点是更加少的，所以如果出错，那么对于整体的影响更小；
之前在考虑每个节点发送的TC消息中包含自己是否为DS节点以及自己的邻居是否为DS节点；
在这种情况下，我是担心是否所有的DS节点都能够通过TC消息传播出去，这个问题是缺乏理论上的考量的；
如果现在广播的是CS消息，那么每个节点只需要标注自己是不是CS节点就好了，因为我觉得每个CS节点的存在都是为了连接两个支配区，那么它肯定是会选为MPR节点的；
而且它只要在TC中表示自己是否为CS节点就可以了，不用其他的邻居节点来标志；
如果以上这些角度来考虑的话，那就不用担心是否会有相应的节点没有通过TC传播出去！

综上所述，因此使用TC传播CS节点更优。

【照旧】
上面的修改方案是想将CS通过TC消息进行广播，但是我发现不仅仅需要二跳的CS消息，还需要二跳的CS'消息，那么就需要两者都进行广播了，这样就不可行了。因为CS'节点肯定不会被选为MPR节点的，那么它就没有自己发送TC消息的权利了，就不能将相应的信息广播出去。

综上所述，因此使用TC传播DS节点更优。







2017.09.14(四)
在当前的情形下，只要不在 hello_process 和 nb_loss 中加入UCDS_CS_computation ，那么其实就相当于对于原先的代码是没有影响的，照理来说是可以正常运行的，因为当前的网路拓扑结构是平时所用的网路拓扑结构，该结构只需要DS节点就可以串起整个网络，不需要CS节点，即DS节点就是虚拟骨干节点的全部。
但是现在代码不能正常运行，那就说明除了UCDS_CS_computation以外的部分还存在问题！！

照理来说不用CS部分的代码，那么运行的模式应该和原先一样，但是不知道为什么就是不对；
另外，如果将OLSR_change3_8中的代码进行运行，出来的结构也都是不正确的，里面的nb-status都为0，不能更新邻居表，也不能进行进一步的操作。

现在根本就不知道哪里出现了错误，无从下手！！



由于多次运行最后终止的函数都是在send_pkt这里，所有最后设置了打印的断点，发现出现的主要错误是当发送的包是TC消息包的时候才会出现错误，发送HELLO消息的时候是不会出现错误的。而且在TC包中加入的DS节点的信息是会出现错误的，其中dsnum这个参数一直都有错误，下面进行调试，发现错误具体在哪里。


发现在send_tc函数中存放到msg.tc().ds_main_node_id()中的DS节点信息是正确的，但是当在send_pkt函数中将其放到buffer中的时候这里面的信息就是错误的了，这是为什么啊？相当于在seng_tc()函数中就没有将相应的信息传送到其中吗？还是有其他什么原因的存在呢？

暂时先把TC中关于CS节点的信息不要发送了，即在send_pkt()函数中直接就不给buffer赋值，具体的做饭阿是加了一行l=0。然后将运行的结果存放在log170914_5--6中。其中5是我自己按了暂停，6是最终运行到它自己暂停的。
加了这些代码之后我发现现在的运行速度变得好慢，不知道是因为运算量变大了，如果是，那在之后应该要进行代码的优化；也不知道是不是因为工程中的文件变多了，如果是，那只需要清理文件就可以提速？

我重新建了工程，并且将UCDS_CS_computation()函数删除，但是运行速度还是很慢，这是为什么啊？







2017.09.15(五)

由于现在根本都不知道哪里出现了错误，所以最好是整个的流程都走一遍，猜测一下有可能哪里出现了问题。
1) 在UCDS_DS_computation()函数中，得到本节点选择的DS节点，并将节点号存放在choose_ds_node_id()中，还把该节点加到本地的DS节点表中；
2) 在send_hello()函数中，首先判断本地DS节点表是否有本节点的存在，如果有，则将hello消息中的mine_ds_node()标记为1，否则标记为0；
3) 在send_pkt()函数中，将mine_ds_node()存放在本节点号所对应的link_type中的最低位里面。并将choose_ds_node_id()存放在HELLO消息的最后4bit中；
4) 当有节点接收到HELLO消息之后，首先在recv()函数中进行解码得到相应的信息参数，之后在process_hello()中调用函数link_sensing()进行信息处理：首先查看mine_ds_node()是否为1，若是，则将linkset中由该消息的源节点所在的link_tuple条目中标记该节点为DS节点，即link_tuple->nb_main_node_ds()置位1。再查看choose_ds_node_id()，如果该节点号和本节点号相同，则说明源节点选择本节点作为DS节点，本节点标志link_tuple->local_main_node_ds()为1；
5) 到UCDS_DS_computation()函数中，通过记录的linkset对本地DS节点集进行更新。






现在在运行的代码是将UCDS_CS_computation()函数从代码中去除的，也去除了相关的信息发送以及接收处理，按照理论而言是能够正常运行的。



CURRENT TIME = 12.507000 , STAGE = send_hello
   node[13] send HELLO, sequence_num = 1\3\5\7\9\11\14\16\18\21\23\26\28\30.
  	      HELLO : mine_ds_node() = 0\0\1\0\1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1. 

CURRENT TIME = 16.546938 , STAGE = send_hello
   node[13] send HELLO, sequence_num = 0\2\4\7\9\11\14\16\19\21\23\26\28\30.
  	      HELLO : mine_ds_node() = 1\1\1\1\1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1. 

CURRENT TIME = 20.597699 , STAGE = send_hello
   node[13] send HELLO, sequence_num = 0\2\5\7\9\12\\14\16\19\21\23\26\28\31.
  	      HELLO : mine_ds_node() = 1\1\1\1\1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1. 

CURRENT TIME = 24.642536 , STAGE = send_hello
   node[13] send HELLO, sequence_num = 0\2\5\7\9\12\14\17\19\21\24\26\28\31.
  	      HELLO : mine_ds_node() = 1\1\1\1\1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1\ 1. 

CURRENT TIME = 28.665895 , STAGE = send_hello
   node[13] send HELLO, sequence_num = 0\2\5\7\10.
  	      HELLO : mine_ds_node() = 1\1\1\1\ 1.




CURRENT TIME = 12.527000 , STAGE = recv
received HELLO from node[13], sequence_num = 0\2\4\6\8\10\13\15\17\20\22\25\27\29.
CURRENT TIME = 16.602000 , STAGE = recv
received HELLO from node[13], sequence_num = 0\1\3\6\8\10\13\15\18\20\22\25\27\29.
CURRENT TIME = 20.627000 , STAGE = recv
received HELLO from node[13], sequence_num = 0\1\4\6\8\11\13\15\18\20\22\25\27\30.
CURRENT TIME = 24.652000 , STAGE = recv
received HELLO from node[13], sequence_num = 0\1.


节点11\13都是没有把自己是DS节点的信息传输出去，因此其他节点都不知道该信息。估计是编码和解码的部分有问题，但是找不到哪里出错。


OLSR_change4_1.cc这个版本运行出来的结果是正确的，但是我已经把原先加的所有的内容都注释了。
运行出来的结果存放在log170915_2中。
接下来我要一部分一部分的把优化代码慢慢往里面加，看一下最主要是那一块出现了错误。

(1) 首先加进去只是标识cd、cs、cs_candidate的全局参数；代码存放在OLSR_change4_.cc中，运行的结果是正确的，运行的结果存放在log170915_2_1中；
(2) 在TC消息中加入有关DS节点的信息，这里主要是把本地DS节点表中的DS节点传送出去，先试试仅仅send_tc()到send_pkt()这样两个函数之间的参数传递是否正确；打印结果存放在log170915_2_2中，是错误的，到了函数send_pkt()中就是有可能会出错。
最后不得已，将关于DS节点的信息直接就在send_pkt()中写入，这是基于OLSR_MAX_MSGS==1的情况才可以的，如果不相等了，应该也会出现问题的。在这种情况下运行的结果是正确的，运行结果存放在log170915_2_21中。
【这里的问题以后还需要好好想想！！！！】
【答】——————终于找到错误了，真的是……对自己无话可说……因为在send_tc()函数中，将有关DS节点的信息提取到tc中的时候是将该操作放在判断“快速路由”的后面的，所以应该有的节点进入了快速路由就没有收取DS节点信息到tc消息中了。倒置一下顺序就好了！！

只是从这个节点编码发送，从另一个节点解码接收，接收节点对信息不进行储存等操作；
（原先这一块是完全错误的，甚至都还没有发送出去，仅仅是send_tc()到send_pkt()这样两个函数之间都是错误的，所以我在想是不是参数的性质设置有问题啊？）

最后接收到的信息也都是正确的，下面对接收到的信息进行处理！

代码存放在OLSR_change4_3中。

(3) 原先只是接收信息，下面对接收到的信息进行处理。

CURRENT TIME = 14.888951 , STAGE = traf_queue_add
[time] 14.890000 finish route node: 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

  message orig node id = 5 , ra node id = 18
  CURRENT TIME = 17.799045 , STAGE = process_tc
    ds_main_node_id() = 1. 
    ds_main_node_id() = 7. (这个是不应该存在的)
    ds_main_node_id() = 9. 
    ds_main_node_id() = 10. 
    ds_main_node_id() = 11. 
    ds_main_node_id() = 14. 
    ds_main_node_id() = 13. 
    ds_main_node_id() = 12. 

也就是说并不是在组网结束的时候所有节点都已经收到全网的DS节点信息，并且在所有节点的本地DS节点表中都更新成功了，还是存在节点没有完全更新，就如上面的信息所示，在14.888951s的时候就已经显示组网成功，但是直到17.799045之后的时候，才将ds_main_node_id() = 7.这条没有用的DS记录从本地DS表中删除。这样的话所使用的TC消息需要的次数和时间太久了，连组网这么长时间都不能满足所有的节点都完成更新，那么到之后正常的传送数据包的时间里，如果出现有节点离网，或者有节点加入网络，那么整个网络知道新的DS表就会需要更加多的时间。那么就这个问题应该怎么进行优化呢？？

【这里的优化问题以后还需要好好想想！！！！】

【优化1】：如果本节点i传出TC消息说自己已经不是DS节点了，那么就将本地根据TC消息更新的DS表中所有ds_main_node_id()为该节点号i的表项都删除，

CURRENT TIME = 15.014944 , STAGE = traf_queue_add
[time] 15.015000 finish route node: 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 

  message orig node id = 15 , ra node id = 12
  CURRENT TIME = 18.561045 , STAGE = process_tc
    ds_main_node_id() = 11. 
    ds_main_node_id() = 12. 
    ds_main_node_id() = 13. 
    ds_main_node_id() = 10. 
    ds_main_node_id() = 9. 
    ds_main_node_id() = 1. 
    ds_main_node_id() = 18. 
    ds_main_node_id() = 14. 

比较可知，优化的效果不好，该方案失败。
下面看看为什么效果不好。


CURRENT TIME = 14.832289 , STAGE = traf_queue_add
[time] 14.833000 finish route node: 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 

  message orig node id = 13 , ra node id = 16
  CURRENT TIME = 16.804045 , STAGE = process_tc
    ds_main_node_id() = 5. 
    ds_main_node_id() = 12. 
    ds_main_node_id() = 13. 
    ds_main_node_id() = 10. 
    ds_main_node_id() = 1. 
    ds_main_node_id() = 14. 
    ds_main_node_id() = 11. 
    ds_main_node_id() = 9. 
    ds_num = 8. 

比较可知，优化的效果不稳定，【该方案失败】。

因为不是每个节点都既是DS节点，又被其他节点选为MPR节点了的。






20170916(六)
紧接着昨天的内容一步一步再把代码加进去。
昨天已经将本地的DS节点表中的节点信息通过TC消息传送到全网中了，并且在各个节点都接收到相应DS节点信息的情况下进行本地DS节点表的维护工作。
下面要让本地节点对CS'节点进行筛选，并利用得到的本地DS节点表中的信息确定CS节点。


(4) 首先要通过UCDS_CS_computation()函数来选择CS'节点，并将CS'节点的信息通过HELLO消息传播出去。
或者有可能在Stage3中就会确定节点一定是CS节点了，那么要对CS节点进行更新。


log170916_1_5中之所有运行会停止，主要是因为process_tc()函数中有关于指针的问题，在删除过期节点信息的时候，由于当循环中的指针it指向dsset_tc()的最后一项的时候，由于该项过去需要进行删除，所以在state_.erase_ds_tuple()函数中将dsse_tc()的最后一项删除了，而在循环中it就已经指向了dsset_tc().end()，在循环的最后it还要进行it+1，此时的it就不是指向dsset_tc().end()，因此就不能终结该循环。在跳出循环之前先判断it是否已经指向dsset_tc().end()并结束循环是必要的，加上该判断之后就没有问题了。

就改进拓扑结构4进行运行，得到的结果是正确的。结果存放在log170916_1_62中。


目前的拓扑结构图是仅仅考验了Stage3就已经确定了CS节点，还没有到先选择得到CS'，然后通过广播将相应的信息传送出去，之后在其他节点为本节点的情况下，在CS'中选择CS节点，下面来进行该操作。
代码存放在OLSR_change4_4.cc中。


(4.1) 使用拓扑结构5来对UCDS_CS_computation()函数其他性能进行验证。
不对，拓扑结构5的话也是直接就可以得到必须为CS节点的所有CS节点了，结果存放在log170916_1_9中，不能够验证整个算法，下面应该设计新的拓扑结构。

在原先的修改过的拓扑结构4就可以看对于CS'节点的选择，只是不能看在CS'中选择CS节点罢了，现在再重新回去看看节点12\14\15它们的CS'的情况。
-----这几个节点也都是没有资格成为CS'的，所以没有机会可以观察这段代码是否正确。

关于验证CS规则的算法是否正确，没有找到合适的拓扑结构，无法验证。

感觉所有的CS节点都会在Stage3的时候被选中，因为整个Stage3就是先进行了CS例外规则的筛选，然后再使用CS规则确定该节点是否是CS节点。其中step1中分成“j和k中只有一个DS或者两个都DS节点”，在step2中若CS例外规则成立则返回step1继续遍历，若不成立则跳转step3，在step3中的判断是否“j和k不直连且不存在公共邻居(非i)”。以上的三条就相当于先进行CS例外规则，不成立则进行CS规则，在CS规则中的判断是否“j和k两者中至少有一个为DS成员，且两者DS邻居节点集不相交”。

感觉整个算法在Stage3就已经大致完成了，其中Stage4中使用完整的CS例外规则是防止两个节点之间有多个CS节点的存在，从而减少到一个。

感觉Stage3和Stage4是完全一模一样的，只是在step2有一点差别，Stage3中的step2是只执行CS例外规则中的第二条，而Stage3中的step2是执行CS例外规则的整个，其他都是一样的啊。
在Stage3中如果“j和k不直连且不存在公共邻居”这个条件不能满足，那么在Stage4中的CS规则里的“二者DS邻居节点集不相交”这个条件也不能满足。

CS规则中有个问题，j和k成为CS'的条件是两者的DS邻居节点集不相交；之后又说如果j和k的共同邻居中有多个CS'，就选择支配因子更大的作为CS节点。
既然前面成立，就不可能出现后面的这种情况。
或者说这里的前后指的j和k不是同样的？

根据拓扑结构4可以修改出上面的情况，即前后指的j和k是不同的。

代码存放在OLSR_change4_5。






20170917(日)

感觉要构建虚拟骨干节点集只需要下面的步骤就可以了：
(1) DS规则
(2) 非CS规则
(3) CS例外规则----只需要第二条即可，如果j和k还有除了i以外的共同邻居节点，那么也不会成为CS节点
(4) CS规则----这里选出的直接就是CS节点，不需要考虑CS'，因为j和k之间不可能还有共同节点。

上面的算法过程相当于只到Stage3就可以结束了。

按照上面的算法流程进行代码调整。

代码存放在OLSR_change4_6。





20170918(一)
今天和雷老师讨论了一下关于UCDS-MPR算法的理解问题，就算法的Stage3和Stage4的内容是否重合，以及CS规则中是否存在内在矛盾进行了激烈的争辩……
后来发现一直困扰我很久的DS邻居节点集的含义不是我之前以为的那样，而雷老师居然第一次猜测就猜出来了……
DS邻居节点集指的是在邻居节点中存在的DS节点的集合。
CS规则中“j和k的DS邻居节点集不相交”，指的是在二跳邻居节点中节点为DS成员的节点集合不相交，不是整个二跳邻居节点集不相交。





20170919(二)
刚刚重新仔细看了一下Stage4中的step2的内容，发现这里的CS例外规则第一条不能在之后用，好像必须在第一次就用到的时候就进行判断。
我原先的设想是先不管CS例外规则第一条，然后在之后的j和k作为主节点的时候，根据本地的CS成员表中的内容，判断当前为CS'以及CS节点，如果他们满足CS例外规则第一条，那么就将其CS'或者CS节点的这个取消。但是这个方法好像是不正确的。
在Stage4中，执行step2中CS例外规则，如果成立则继续遍历邻居节点，所以如果某个节点是CS'或CS节点也有可能不是因为当前j节点没有执行CS例外规则第一条所导致的。所以最好还是将CS节点的信息广播一下，那么TC消息中的空间基本就用完了。
关于CS节点通过TC消息进行传送，我在想是不是只要每个CS节点传送TC的时候表明自己是不是CS节点就可以了？因为CS节点是连通集节点，它的存在就是为了将DS节点进行连通，那么它肯定是会被它的邻居节点选为MPR节点的。如果从这个角度考虑，那么在TC消息中只需要1bit就可以表示了，不需要占用20bit了。

还是不行，因为在CS规则中从众多的CS'中选择CS节点只能在j或者k为本节点的时候进行，此时CS'是一跳邻居节点，可以通过HELLO消息得到相应的信息；如果在i是本节点的时候从众多的CS'中选择CS节点，那么CS'就是二跳邻居节点了，不能通过HELLO消息得到，又由于CS'肯定不会被选为MPR节点，所以它也不能发送TC消息。


代码存放在OLSR_change4_7。













































